#
# obi configuration for splash
#

# The project name
name: 'splash'

# Build task
# ----------
# Comma-separated list of command line arguments passed to cmake
cmake-args: ['-G "Unix Makefiles"',
             '-DCMAKE_BUILD_TYPE=RelWithDebInfo',
             '-DCMAKE_EXPORT_COMPILE_COMMANDS=1']

# Comma-separated list of arguments passed to cmake --build
# These are sensitive to the build system generator
# specified in the cmake-args step
build-args: ['-j8 -l8']

# The directory to perform the out-of-source cmake build
build-dir: "build"

# Override the default obi build task
# build-cmd: ""

# Clean task
# ----------
# Override the default obi clean task
# clean-cmd: ""

# Stop task
# ----------
# Comma-separated list of command-line commands to run when stopping splash
on-stop-cmds: []

# Override the default obi stop task
# stop-cmd: ""

# Rsync task
# -----------
# Comma-separated list of files to ignore when rsyncing to remote machines
rsync-excludes: [".git", "build"]

# Launch task
# -----------
# Comma-separated list of arguments to pass to splash when it is run
launch-args: []

# Path to the project binary from the top-level project directory
# The target location is determined by your cmake file
target: "build/splash"

# Comma-separated list of command-line commands to run before launching splash
pre-launch-cmds: []

# Comma-separated list of command-line commands to run after launching splash
post-launch-cmds: []

# Override the default command to launch the application in the obi go task
# launch-cmd: ""

# Debuggers to use in obi go --debug=<debugger>
debuggers:
  gdb: "gdb -ex run --args"
  lldb: "lldb --"
  strace: "sudo strace"
  apitrace: "apitrace trace"

# 'rooms' is a map where the keys are room names. Each room has its own
# settings which are used when you do `obi go <room-name>`
# You can define any number of rooms here.
# Any key, value specified at the top-level can be overriden on a per-room basis
rooms:
  # This setting governs what happens when the application runs on
  # your local machine.
  localhost:
    env-vars: {OB_SHARE_PATH: 'share/splash:$OB_SHARE_PATH'}
    pools: {wands-pool: 'wands'}
    screen-protein: /etc/oblong/screen.protein
    feld-protein: /etc/oblong/feld.protein
    launch-args: []

  # Settings for another development environment. obi supports building and
  # launching on remote environments including any number of machines. You can
  # set those up here. The following is a theoretical setup that would build and
  # run across 3 machines, using the login 'my-user'. A pre-requisite to this
  # would be to ensure you have ssh keys set up on each of the machines listed
  # in 'hosts'.
  my-room:
    env-vars: {DISPLAY: ':0', OB_SHARE_PATH: 'share/splash:$OB_SHARE_PATH'}
    launch-args: [
      '--wands-pool=tcp://192.168.1.4/wands',
      '--config=share/splash/config.protein',
      '--room=/etc/oblong/room.protein',
      /etc/oblong/room-screen.protein,
      /etc/oblong/room-feld.protein
    ]
    user: my-user
    hosts: [192.168.1.1, 192.168.1.2, 192.168.1.3]
    build-args: ["-j32 -l32"]